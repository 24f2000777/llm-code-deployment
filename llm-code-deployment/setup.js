#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setup() {
  console.log('\nüöÄ LLM Code Deployment - Setup Wizard\n');
  console.log('This wizard will help you configure your .env file.\n');

  const config = {};

  // Student Information
  console.log('üìß Student Information:');
  config.STUDENT_EMAIL = await question('Enter your email: ');
  
  console.log('\nüîê Security Configuration:');
  console.log('This secret will be used to verify requests from instructors.');
  console.log('You will submit this secret in the Google Form.\n');
  const useRandomSecret = await question('Generate random secret? (y/n): ');
  
  if (useRandomSecret.toLowerCase() === 'y') {
    // Generate a secure random secret
    const crypto = require('crypto');
    config.USER_SECRET = crypto.randomBytes(32).toString('hex');
    console.log(`\n‚úÖ Generated secret: ${config.USER_SECRET}`);
    console.log('‚ö†Ô∏è  Save this secret - you\'ll need it for the Google Form!\n');
  } else {
    config.USER_SECRET = await question('Enter your secret (min 32 characters): ');
    if (config.USER_SECRET.length < 32) {
      console.log('‚ö†Ô∏è  Warning: Secret is shorter than recommended 32 characters');
    }
  }

  // GitHub Configuration
  console.log('\nüêô GitHub Configuration:');
  config.GITHUB_USERNAME = await question('Enter your GitHub username: ');
  console.log('\nTo create a GitHub Personal Access Token:');
  console.log('1. Go to https://github.com/settings/tokens');
  console.log('2. Click "Generate new token (classic)"');
  console.log('3. Select scopes: repo, workflow, admin:repo_hook');
  console.log('4. Copy the generated token\n');
  config.GITHUB_TOKEN = await question('Enter your GitHub token: ');

  // LLM Configuration
  console.log('\nü§ñ LLM Configuration (choose one or more):');
  console.log('1. Google Gemini (FREE tier available - Recommended)');
  console.log('2. OpenAI (requires paid account)');
  console.log('3. Anthropic Claude (requires paid account)');
  console.log('4. AIPipe (free option)\n');
  
  const llmChoice = await question('Which LLM would you like to use? (1/2/3/4): ');

  if (llmChoice === '1') {
    console.log('\nGet your API key from: https://makersuite.google.com/app/apikey');
    console.log('Steps:');
    console.log('1. Go to the link above');
    console.log('2. Click "Create API Key"');
    console.log('3. Copy the key\n');
    config.GEMINI_API_KEY = await question('Enter your Gemini API key: ');
  } else if (llmChoice === '2') {
    console.log('\nGet your API key from: https://platform.openai.com/api-keys');
    config.OPENAI_API_KEY = await question('Enter your OpenAI API key: ');
  } else if (llmChoice === '3') {
    console.log('\nGet your API key from: https://console.anthropic.com/');
    config.ANTHROPIC_API_KEY = await question('Enter your Anthropic API key: ');
  } else if (llmChoice === '4') {
    console.log('\nSign up at: https://aipipe.io/');
    config.AIPIPE_TOKEN = await question('Enter your AIPipe token: ');
  }

  // Server Configuration
  console.log('\n‚öôÔ∏è  Server Configuration:');
  const port = await question('Enter port number (default: 3000): ');
  config.PORT = port || '3000';
  config.API_ENDPOINT_PATH = '/api/task';
  config.LOG_LEVEL = 'info';
  config.NODE_ENV = 'development';

  // Retry Configuration
  config.MAX_RETRIES = '5';
  config.INITIAL_RETRY_DELAY = '1';

  // Write .env file
  const envPath = path.join(__dirname, '.env');
  let envContent = '# LLM Code Deployment Configuration\n';
  envContent += '# Generated by setup wizard\n\n';
  
  envContent += '# Student Information\n';
  envContent += `STUDENT_EMAIL=${config.STUDENT_EMAIL}\n\n`;
  
  envContent += '# Security\n';
  envContent += `USER_SECRET=${config.USER_SECRET}\n\n`;
  
  envContent += '# GitHub Configuration\n';
  envContent += `GITHUB_TOKEN=${config.GITHUB_TOKEN}\n`;
  envContent += `GITHUB_USERNAME=${config.GITHUB_USERNAME}\n\n`;
  
  envContent += '# LLM API Configuration\n';
  if (config.GEMINI_API_KEY) {
    envContent += `GEMINI_API_KEY=${config.GEMINI_API_KEY}\n`;
  }
  if (config.OPENAI_API_KEY) {
    envContent += `OPENAI_API_KEY=${config.OPENAI_API_KEY}\n`;
  }
  if (config.ANTHROPIC_API_KEY) {
    envContent += `ANTHROPIC_API_KEY=${config.ANTHROPIC_API_KEY}\n`;
  }
  if (config.AIPIPE_TOKEN) {
    envContent += `AIPIPE_TOKEN=${config.AIPIPE_TOKEN}\n`;
  }
  envContent += '\n';
  
  envContent += '# Server Configuration\n';
  envContent += `PORT=${config.PORT}\n`;
  envContent += `API_ENDPOINT_PATH=${config.API_ENDPOINT_PATH}\n`;
  envContent += `LOG_LEVEL=${config.LOG_LEVEL}\n`;
  envContent += `NODE_ENV=${config.NODE_ENV}\n\n`;
  
  envContent += '# Retry Configuration\n';
  envContent += `MAX_RETRIES=${config.MAX_RETRIES}\n`;
  envContent += `INITIAL_RETRY_DELAY=${config.INITIAL_RETRY_DELAY}\n`;

  fs.writeFileSync(envPath, envContent);

  console.log('\n‚úÖ Configuration saved to .env file!\n');
  console.log('üìã Summary:');
  console.log(`   Email: ${config.STUDENT_EMAIL}`);
  console.log(`   Secret: ${config.USER_SECRET.substring(0, 16)}...`);
  console.log(`   GitHub User: ${config.GITHUB_USERNAME}`);
  console.log(`   Port: ${config.PORT}`);
  console.log(`   LLM: ${llmChoice === '1' ? 'Google Gemini' : llmChoice === '2' ? 'OpenAI' : llmChoice === '3' ? 'Anthropic Claude' : 'AIPipe'}`);
  
  console.log('\nüìù IMPORTANT - Save these for Google Form submission:');
  console.log('   1. API URL: https://your-deployed-app.com/api/task');
  console.log(`   2. Secret: ${config.USER_SECRET}`);
  console.log(`   3. GitHub Repo: https://github.com/${config.GITHUB_USERNAME}/llm-code-deployer`);
  
  console.log('\nüöÄ Next steps:');
  console.log('   1. Start the server: npm start');
  console.log('   2. Test the API: npm test');
  console.log('   3. Deploy to a hosting platform (Railway, Render, etc.)');
  console.log('   4. Submit to Google Form with the information above\n');

  rl.close();
}

setup().catch(error => {
  console.error('Setup failed:', error);
  rl.close();
  process.exit(1);
});